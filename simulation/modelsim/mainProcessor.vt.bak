// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/17/2016 22:20:19"
                                                                                
// Verilog Test Bench template for design : mainProcessor
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module mainProcessor_vlg_tst();
// constants                                           
// general purpose registers

// test vector input registers
reg clk;
reg reset;
reg [7:0] r_expected,x_out,y_out;
reg [4:0] addr_out;
reg [2:0] op_out;
reg [31:0] vectornum, errors;
reg [32:0] testVectors[1000:0];
// wires                                               
wire [4:0]  addr;
wire [2:0]  op;
wire [7:0]  r;
wire [7:0]  x;
wire [7:0]  y;

// assign statements (if any)                          
mainProcessor PROCESSOR (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.op(op),
	.r(r),
	.reset(reset),
	.x(x),
	.y(y)
);

always
begin
	clk = 0; #5; clk = 1;  #5;
end

initial                                                
begin     
	$display("Running testbench");   
	$readmemb("testbench_file.txt",testVectors);
	vectornum = 0;
	errors = 0;
	reset = 1; #7.5; reset  = 0;                 
end     
                                               
always @(posedge clk)                                                              
begin                                                  
	#1; {op,addr,x,y,r_expected} = testVectors[vectornum];
end                                                    

always @(negedge clk)
begin
	if(~reset)
	begin
		if(r !== r_expected)
		begin
			$display("Error: inputs %b",{op, addr,x,y});
			$display("Outputs = %b (%b expected)",r,r_expected);
			errors = errors +1;
		end
		vectornum = vectornum+1;
		if(testVectors[vectornum] === 24'bx)
		begin
			$display("%d tests completed with %d errors",vectornum,errors);
			$finish;
		end
		
	end
end

endmodule

